<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: groovy | TechBeats]]></title>
  <link href="http://techbeats.deluan.com/blog/tag/groovy/atom.xml" rel="self"/>
  <link href="http://techbeats.deluan.com/"/>
  <updated>2015-07-14T18:52:16-04:00</updated>
  <id>http://techbeats.deluan.com/</id>
  <author>
    <name><![CDATA[Deluan QuintÃ£o]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Processing large templates with Gradle and FreeMarker]]></title>
    <link href="http://techbeats.deluan.com/processing-large-templates-with-gradle-and-freemarker/"/>
    <updated>2015-07-10T20:44:24-04:00</updated>
    <id>http://techbeats.deluan.com/processing-large-templates-with-gradle-and-freemarker</id>
    <content type="html"><![CDATA[<p><strong>TL;DR</strong> This article show a solution for overcoming the issue <a href="https://issues.gradle.org/browse/GRADLE-3122">GRADLE-3122</a>.
You can <a href="/blog/2015/07/10/processing-large-templates-with-gradle-and-freemarker/#final-solution">jump straight to the implementation</a>
at the bottom of this post.</p>

<p>In my current project we have a need to generate a set of files for each environment, using templates. As this is a
<a href="http://gradle.org">Gradle</a> project, this requirement is easily accomplished with a <code>CopyTask</code>:</p>

<!-- more -->


<pre><code class="groovy build.gradle">task processTemplates(type: Copy) {
     from 'src/templates', {
         include '**/*.*'
     }

     def env = loadEnvironment()
     eachFile { FileCopyDetails file -&gt;
         if (file.name.endsWith('.template')) {
             expand(env)
             file.name = file.sourceName - '.template'
         }
     }

     inputs.file "env/${envName}.properties"
     into "$buildDir/output/$envName"
}

def getEnvName() {
    hasProperty('env') ? env : 'dev'
}

def loadEnvironment() {
    def properties = new Properties()
    new File("env/${envName}.properties").withInputStream { properties.load(it) }
    properties
}
</code></pre>

<p>The <code>processTemplates</code> task above will copy all files from <code>src/templates</code> to <code>build/output/&lt;envName&gt;</code>. All files whose
name ends with <code>.template</code> will be processed and tokens (ex: <code>${variable}</code>) will be replaced by their values from the
<code>env/&lt;envName&gt;.properties</code> file. Adding the properties file as an input for the task is important (<code>inputs.file</code> method
call), so when you change it, the task will be re-executed on the next build.</p>

<p>Simple, right?</p>

<h3>Not so fast, Johnny&hellip;</h3>

<p>This worked fine until we had one template that was really big (120KB) and we found out about issue
<a href="https://issues.gradle.org/browse/GRADLE-3122">GRADLE-3122</a>. Gradle uses Groovy&rsquo;s
<a href="http://docs.groovy-lang.org/latest/html/documentation/template-engines.html#_simpletemplateengine">SimpleTemplateEngine</a>,
that can only process files up to 64KB!</p>

<p>Newest versions of Groovy (2.4+) include
<a href="http://docs.groovy-lang.org/latest/html/documentation/template-engines.html#_streamingtemplateengine">StreamingTemplateEngine</a>
that does not have this limit, but the most recent version of Gradle (2.5 as of this post)
still uses Groovy 2.3&hellip;</p>

<p>One way to overcome this would be to use Ant&rsquo;s <code>ReplaceTokens</code> filter, simply by changing our templates to use Ant&rsquo;s
token syntax (ex: <code>@variable@</code>) and changing the line <code>expand(env)</code> to <code>filter(ReplaceTokens, tokens: env)</code></p>

<p>But because we need to use logic in our templates (if&rsquo;s and loops), we had to come up with a different approach.
The solutions available were too simple for our needs or too complicated to implement in a clear way, making them
unsuitable for our project. So we decided to roll&hellip;</p>

<h3><a name="final-solution"></a>Our own solution</h3>

<p>Finally we decided to implement a simple template processor using <a href="http://freemarker.org">FreeMarker</a>. We select
this awesome template engine for its feature set, IDE support and excelent OSS reputation, although the solution bellow
could be adapted to be used with any other template engine (<a href="http://velocity.apache.org">Velocity</a>,
<a href="https://github.com/samskivert/jmustache">JMustache</a>, etc&hellip;)</p>

<pre><code class="groovy buildSrc/src/main/groovy/your/package/TemplateProcessor.groovy">package your.package

import freemarker.template.Configuration
import org.apache.commons.io.FileUtils
import org.apache.tools.ant.DirectoryScanner

import static freemarker.template.TemplateExceptionHandler.RETHROW_HANDLER

class TemplateProcessor {
    private static final String TEMPLATE_EXTENSION = '.ftl'
    private String templatesDir
    private String outputDir
    private Configuration cfg

    TemplateProcessor(String templatesDir, String outputDir) {
        this.templatesDir = templatesDir
        this.outputDir = outputDir

        cfg = new Configuration()
        cfg.setDirectoryForTemplateLoading(new File(templatesDir))
        cfg.setDefaultEncoding("UTF-8")
        cfg.setTemplateExceptionHandler(RETHROW_HANDLER)
    }

    void execute(Map properties) {
        DirectoryScanner scanner = createScanner()
        scanner.scan()
        scanner.includedFiles.each { String fileName -&gt;
            if (fileName.endsWith(TEMPLATE_EXTENSION)) {
                process(fileName, properties)
            } else {
                copy(fileName)
            }
        }
    }

    private process(String fileName, Map properties) {
        def outputFile = new File(outputDir, fileName - TEMPLATE_EXTENSION)
        def template = cfg.getTemplate(fileName)

        outputFile.withWriter { out -&gt;
            template.process(properties, out)
        }
    }

    private copy(String fileName) {
        def inputFile = new File(templatesDir, fileName)
        def outputFile = new File(outputDir, fileName)
        FileUtils.copyFile(inputFile, outputFile)
    }

    private DirectoryScanner createScanner() {
        def scanner = new DirectoryScanner()
        scanner.includes = ['**/*']
        scanner.basedir = new File(templatesDir)
        scanner
    }
}
</code></pre>

<p>Note that we now use the <code>.ftl</code> file extension for our templates, to enable support in our
<a href="http://jetbrains.com/idea">IDE of choice</a>. To use the processor, you have to put it under the
<a href="https://docs.gradle.org/current/userguide/organizing_build_logic.html#sec:build_sources">buildSrc project</a>.
This is a special &ldquo;module&rdquo; in your project that is a simple way to organize build logic in your build scripts. It is
all automatically handled by Gradle. You&rsquo;ll also need a small <code>build.gradle</code> just for  declaring the dependencies for
FreeMarker and Apache Commons IO (used for the <code>copyFile</code> method):</p>

<pre><code class="groovy buildSrc/build.gradle">repositories { mavenCentral() }

dependencies {
    compile 'org.freemarker:freemarker:2.3.23'
    compile 'commons-io:commons-io:2.4'
}
</code></pre>

<p>To have this code available to your main build script, add this two files in your project, in the following paths:</p>

<ul>
<li><em>buildSrc/build.gradle</em></li>
<li><em>buildSrc/src/main/groovy/your/package/TemplateProcessor.groovy</em></li>
</ul>


<p>The last step is to actually use it in our <code>processTemplates</code> task:</p>

<pre><code class="groovy build.gradle">import your.package.TemplateProcessor

task processTemplates() {
    def fromDir = 'src/templates'
    def intoDir = "$buildDir/output/$envName"
    doLast {
      def env = loadEnvironment()
      new TemplateProcessor(fromDir, intoDir).execute(env)
    }

    inputs.dir fromDir
    inputs.file "env/${envName}.properties"
    outputs.dir intoDir
}
</code></pre>

<p>Not hard, eh? Note that this task is not a <code>CopyTask</code> anymore, so we now need to specify its inputs and outputs.</p>

<p>My plan is to convert this code into a proper Gradle plugin. But for now: That&rsquo;s all, folks!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Using Spring DI in your Gaelyk projects]]></title>
    <link href="http://techbeats.deluan.com/using-spring-di-in-your-gaelyk-projects/"/>
    <updated>2010-10-11T01:07:55-04:00</updated>
    <id>http://techbeats.deluan.com/using-spring-di-in-your-gaelyk-projects</id>
    <content type="html"><![CDATA[<p>Since I started using <a href="http://gaelyk.appspot.com/">Gaelyk</a>, one of the features I missed most (coming from a Grails
background) is Spring&rsquo;s dependency injection. Until recently I didn&rsquo;t even know if it was possible to use Spring in
<a href="http://appengine.google.com/">Google App Engine</a>, so I decided to do a little investigation on the subject, and
found out that it&rsquo;s very easy indeed.</p>

<p>Here&rsquo;s a little tutorial on how to configure Spring in your Gaelyk project. I&rsquo;m assuming you have basic knowledge of
Spring, Gaelyk and Maven.</p>

<p>First, let&rsquo;s create a Gaelyk project. The easiest way is using the excellent
<a href="http://code.google.com/p/maven-gaelyk/">maven-gaelyk archetype</a>:
<code>
mvn archetype:generate -DarchetypeGroupId=org.codeconsole -DarchetypeArtifactId=gaelyk-archetype -DarchetypeVersion=0.5.5 -DarchetypeRepository=http://maven-gaelyk.googlecode.com/svn/repository/ -DartifactId=gaelyk-spring -DgroupId=com.deluan.gaelyk -DgaeApplicationName=gaelyk-spring
</code></p>

<!-- more -->


<p>Now open the project in your favorite IDE, so we can edit the configuration files. First, add the Spring dependency to your <code>pom.xml</code>:</p>

<p><div><pre><code>        &lt;dependency&gt;
            &lt;groupId&gt;org.springframework&lt;/groupId&gt;
            &lt;artifactId&gt;spring-web&lt;/artifactId&gt;
            &lt;version&gt;${spring.version}&lt;/version&gt;
        &lt;/dependency&gt;</code></pre></div>
</p>

<p>Next we need to configure Spring&rsquo;s ContextLoaderListener in <code>web.xml</code>:</p>

<p><div><pre><code>    &lt;context-param&gt;
        &lt;param-name&gt;contextConfigLocation&lt;/param-name&gt;
        &lt;param-value&gt;
            /WEB-INF/spring/*.xml
        &lt;/param-value&gt;
    &lt;/context-param&gt;

    &lt;listener&gt;
        &lt;listener-class&gt;
            org.springframework.web.context.ContextLoaderListener
        &lt;/listener-class&gt;
    &lt;/listener&gt;</code></pre></div>
</p>

<p>As you can see from above, we configured Spring to load all context configuration files under the directory <code>WEB-INF/spring</code>.</p>

<p>With these configurations in place, your project is already Spring enabled. Now we need a easy way to access the
Spring&rsquo;s Application Context. One good way to do this is using a singleton that implements the ApplicationContextAware
interface. To keep this post as small as possible, I borrowed an implementation from
<a href="http://sujitpal.blogspot.com/2007/03/accessing-spring-beans-from-legacy-code.html">this blog post</a>, where you can learn
more about the details. Create the directory <code>src/main/groovy</code> and put the following SpringApplicationContext singleton
there (in the correct package):</p>

<p><div><pre><code>package com.deluan.gaelyk;

import org.springframework.beans.BeansException;
import org.springframework.context.ApplicationContext;
import org.springframework.context.ApplicationContextAware;

/**
 * Wrapper to always return a reference to the Spring Application Context from
 * within non-Spring enabled beans. Unlike Spring MVC&#39;s WebApplicationContextUtils
 * we do not need a reference to the Servlet context for this. All we need is
 * for this bean to be initialized during application startup.
 *
 * Original from http://sujitpal.blogspot.com/2007/03/accessing-spring-beans-from-legacy-code.html
 */
public class SpringApplicationContext implements ApplicationContextAware {

    private static ApplicationContext CONTEXT;

    /**
     * This method is called from within the ApplicationContext once it is
     * done starting up, it will stick a reference to itself into this bean.
     * @param context a reference to the ApplicationContext.
     */
    public void setApplicationContext(ApplicationContext context) throws BeansException {
        CONTEXT = context;
    }

    /**
     * This is about the same as context.getBean(&quot;beanName&quot;), except it has its
     * own static handle to the Spring context, so calling this method statically
     * will give access to the beans by name in the Spring application context.
     * As in the context.getBean(&quot;beanName&quot;) call, the caller must cast to the
     * appropriate target class. If the bean does not exist, then a Runtime error
     * will be thrown.
     * @param beanName the name of the bean to get.
     * @return an Object reference to the named bean.
     */
    public static Object getBean(String beanName) {
        return CONTEXT.getBean(beanName);
    }

    public static ApplicationContext getContext() {
        return CONTEXT;
    }
}
</code></pre></div>
</p>

<p>Configure the singleton in your spring context:</p>

<p><div><pre><code>&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;
&lt;beans xmlns=&quot;http://www.springframework.org/schema/beans&quot;
       xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot;
       xsi:schemaLocation=&quot;http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd&quot;&gt;

    &lt;bean id=&quot;springApplicationContext&quot; class=&quot;com.deluan.gaelyk.SpringApplicationContext&quot;/&gt;

    &lt;bean id=&quot;dateFormat&quot; class=&quot;java.text.SimpleDateFormat&quot;&gt;
        &lt;constructor-arg value=&quot;yyyy/MM/dd&quot; /&gt;
    &lt;/bean&gt;

    &lt;bean id=&quot;timeFormat&quot; class=&quot;java.text.SimpleDateFormat&quot;&gt;
        &lt;constructor-arg value=&quot;hh:mm:ss&quot; /&gt;
    &lt;/bean&gt;

    &lt;bean id=&quot;dateTimeFormat&quot; class=&quot;java.text.SimpleDateFormat&quot;&gt;
        &lt;constructor-arg value=&quot;yyyy/MM/dd hh:mm:ss&quot; /&gt;
    &lt;/bean&gt;

&lt;/beans&gt;</code></pre></div>
</p>

<p>As you can see, I also declared some SimpleDateFormat instances as beans to be used in our examples.</p>

<p>Now everything is configured and ready to be used. Let&rsquo;s see how we can obtain a spring bean inside a Groovlet.
Create the file <code>WEB-INF/groovy/index.groovy</code> with the following content:</p>

<p><div><pre><code>import com.deluan.gaelyk.SpringApplicationContext

def dateFormat = SpringApplicationContext.getBean(&#39;dateFormat&#39;)
def now = new Date()

println dateFormat.format(now)</code></pre></div>
</p>

<p>Now run your application with the command <code>mvn gae:run</code>, point your browser to <a href="http://localhost:8080/index.groovy">http://localhost:8080/index.groovy</a> and
you should see something like this:</p>

<p><img src="/images/blog/2010-10-11-using-spring-di-in-your-gaelyk-projects/Screen_Shot.png"></p>

<p>Well, that&rsquo;s it! Nothing much different from what you are used to do in a normal Web application, right? But
remember: Gaelyk is NOT your normal Web framework so let&rsquo;s spice things a little bit.</p>

<p>The solution for looking up beans depicted above is a bit cumbersome. Let&rsquo;s use
<a href="http://gaelyk.appspot.com/tutorial/plugins">Gaelyk&rsquo;s plugin system</a> to make things a little more &ldquo;groovy&rdquo;.
Using the plugin descriptor bellow, we can provide shortcuts to our SpringApplicationContext&rsquo;s methods, getContext()
and getBean(). Save it in the file <code>WEB-INF/plugins/spring.groovy</code>:</p>

<p><div><pre><code>import com.deluan.gaelyk.SpringApplicationContext

binding {
    appCtx = SpringApplicationContext.context

    getBean = {
        SpringApplicationContext.getBean(it)
    }

    autowire = { self, beanNames -&gt;
        beanNames.each {
            self.setProperty(it, SpringApplicationContext.getBean(it))
        }
    }
}</code></pre></div>
</p>

<p>Before you can use these shortcuts, you need to tell Gaelyk about your descriptor by &ldquo;installing&rdquo; it in your project.
Save the code bellow in the file <code>WEB-INF/plugins.groovy</code>:</p>

<p><div><pre><code>install spring</code></pre></div>
</p>

<p>Now you can use the shortcuts in your Groovlets this way:</p>

<p><div><pre><code>
def now = new Date()

// Simple context lookup
def dateFormat = getBean(&#39;dateFormat&#39;)

// Resolve a list of bean names and create bindings for each one of them
autowire this, [&#39;timeFormat&#39;, &#39;dateTimeFormat&#39;]

html.html {
    body {
        p appCtx.displayName  // Access the ApplicationContext
        p dateFormat.format(now)
        p timeFormat.format(now)
        p dateTimeFormat.format(now)
    }
}</code></pre></div>
</p>

<p>Cool, isn&rsquo;t it? A note on the <code>autowire</code> binding: It creates bindings &ldquo;automagically&rdquo; for each bean you passed as a
parameter, as if the beans were declared in your Groovlet.</p>

<p>You can download the sample project used in this post from GitHub: <a href="http://github.com/deluan/gaelyk-spring.">http://github.com/deluan/gaelyk-spring.</a>
You can follow each commit to see exactly what was changed in each step of this tutorial.</p>

<p>If you have any suggestion or question, please let me know.</p>

<p><strong>UPDATE</strong>: I&rsquo;ve refactored the <code>autowire</code>method into a Category, so now it&rsquo;s not necessary to pass <code>this</code> as the first
parameter.  The new version is available at <a href="http://github.com/deluan/gaelyk-spring">GitHub</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Creating permalinks with Grails]]></title>
    <link href="http://techbeats.deluan.com/creating-permalinks-with-grails/"/>
    <updated>2009-03-18T22:51:37-04:00</updated>
    <id>http://techbeats.deluan.com/creating-permalinks-with-grails</id>
    <content type="html"><![CDATA[<p>I&rsquo;ve been working with <a href="http://grails.org">Grails</a> for some time now and if I had to choose just one good thing
to say about it is how it&rsquo;s community is really great!</p>

<p>I think it&rsquo;s time to start giving back some contribution, and here&rsquo;s the first one: A Permalink Codec to generate
permalinks based on strings. It strips out all non word chars and convert the resulting string to lowercase:</p>

<!-- more -->


<p><div><pre><code>/*
 * Copyright 2010 Deluan Cotts (grails@deluan.com.br)
 *
 * Licensed under the Apache License, Version 2.0 (the &quot;License&quot;);
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an &quot;AS IS&quot; BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package com.deluan.grails.codecs

import java.util.regex.Matcher
import java.util.regex.Pattern

/**
 * Strip all non word chars, convert to lowercase
 */
class PermalinkCodec {
    private static final String[] CARACTERES_SEM_ACENTO
    private static final Pattern[] PATTERNS

    static {
        CARACTERES_SEM_ACENTO = [&quot;a&quot;, &quot;e&quot;, &quot;i&quot;, &quot;o&quot;, &quot;u&quot;, &quot;c&quot;, &quot;n&quot;]
        PATTERNS = new Pattern[CARACTERES_SEM_ACENTO.length]
        PATTERNS[0] = Pattern.compile(&quot;[Ã¡Ã Ã£Ã¢Ã¤]&quot;, Pattern.CASE_INSENSITIVE)
        PATTERNS[1] = Pattern.compile(&quot;[Ã©Ã¨ÃªÃ«]&quot;, Pattern.CASE_INSENSITIVE)
        PATTERNS[2] = Pattern.compile(&quot;[Ã­Ã¬Ã¯Ã®]&quot;, Pattern.CASE_INSENSITIVE)
        PATTERNS[3] = Pattern.compile(&quot;[Ã³Ã²Ã¶ÃµÃ´]&quot;, Pattern.CASE_INSENSITIVE)
        PATTERNS[4] = Pattern.compile(&quot;[ÃºÃ¹Ã¼Ã»]&quot;, Pattern.CASE_INSENSITIVE)
        PATTERNS[5] = Pattern.compile(&quot;Ã§&quot;, Pattern.CASE_INSENSITIVE)
        PATTERNS[6] = Pattern.compile(&quot;Ã±&quot;, Pattern.CASE_INSENSITIVE)
    }

    private static String replaceSpecial(String text) {
        String result = text
        for (int i = 0; i &lt; PATTERNS.length; i++) {
            Matcher matcher = PATTERNS[i].matcher(result)
            result = matcher.replaceAll(CARACTERES_SEM_ACENTO[i])
        }
        return result
    }

    static encode = {str -&gt;
        str = replaceSpecial(str.toString().toLowerCase())
        return str.replaceAll(&quot;\\W&quot;, &quot;-&quot;)
    }

}</code></pre></div>
</p>

<p>To use it in your Grails project, save it in <code>grails-app/utils/com/deluan/grails/codecs</code> folder as <code>PermalinkCodec.groovy</code>.</p>

<p>Please read the (excelent) <a href="http://grails.org/doc/latest">Grails manual</a> for more info
on <a href="http://grails.org/doc/latest/guide/single.html#codecs">how to use codecs</a>.</p>
]]></content>
  </entry>
  
</feed>
