<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: zk | TechBeats]]></title>
  <link href="http://techbeats.deluan.com/blog/tag/zk/atom.xml" rel="self"/>
  <link href="http://techbeats.deluan.com/"/>
  <updated>2015-06-11T23:24:44-04:00</updated>
  <id>http://techbeats.deluan.com/</id>
  <author>
    <name><![CDATA[Deluan Quint찾o]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[File encoding auto-detection for ZK Fileupload component]]></title>
    <link href="http://techbeats.deluan.com/blog/2015/06/11/file-encoding-auto-detection-for-zk-fileupload-component/"/>
    <updated>2015-06-11T22:09:24-04:00</updated>
    <id>http://techbeats.deluan.com/blog/2015/06/11/file-encoding-auto-detection-for-zk-fileupload-component</id>
    <content type="html"><![CDATA[<p>Proper handling of file encoding can be a royal headache. Recently I spent an
unreasonable amount of time trying to figure out why <a href="www.zkoss.com">ZK&rsquo;s</a>
Fileupload component was messing with the contents of my CSV file:</p>

<!-- more -->


<p><img src="/images/blog/2015-06-11-file-encoding-auto-detection-for-zk-fileupload-component/0.png"></p>

<p>The data should be: <code>c처digo redome;;c처digo hemocentro;nome; da m찾e;</code></p>

<p>The file was generated with Windows Excel, using the encoding ISO-8859-2
(common encoding for Windows). After some investigation I found
out that Fileupload by default treats all files with content type <code>text/...</code>
as UTF-8! Ouch!!</p>

<p>If all your files will be generated using the same file encoding, this can be
fixed with the following configuration:</p>

<p>```xml
<zk>
  &lt;system-config></p>

<pre><code>&lt;upload-charset&gt;YOUR ENCODING&lt;/upload-charset&gt; &lt;!-- ISO-8859-2 in my case --&gt;
...
</code></pre>

<p>  &lt;/system-config>
  &hellip;
</zk>
```</p>

<p>The <a href="http://books.zkoss.org/wiki/ZK_Configuration_Reference/zk.xml/The_system-config_Element/The_upload-charset_Element">upload-charset</a> tag did the trick! But what if my user decides to
move to a different (better?) platform in the future, and generates the file
with UTF-8? Or any other encoding?</p>

<p>Then the proper solution is to use the tag <a href="http://books.zkoss.org/wiki/ZK_Configuration_Reference/zk.xml/The_system-config_Element/The_upload-charset-finder-class_Element">upload-charset-finder-class</a>:</p>

<p><code>xml
&lt;upload-charset-finder-class&gt;a_class_name&lt;/upload-charset-finder-class&gt;
</code></p>

<p>The <a href="http://books.zkoss.org/wiki/ZK_Configuration_Reference/zk.xml/The_system-config_Element/The_upload-charset-finder-class_Element">documentation</a> says that this class has to implement
the interface <a href="http://www.zkoss.org/javadoc/latest/zk/org/zkoss/zk/ui/util/CharsetFinder.html">CharsetFinder</a>
and its sole method <code>String getCharset(String contentType, InputStream content)</code>:</p>

<blockquote><p>When a text file is uploaded, the getCharset method is called and it can
determines the encoding based on the content type and/or the content of the
uploaded file.</p></blockquote>

<p>Which leads us to the main reason of this post: <em>How to detect the file
encoding, if ZK itself does not provide a default implementation for this
interface?</em></p>

<p>More research pointed me to the <a href="http://stackoverflow.com/questions/499010/java-how-to-determine-the-correct-charset-encoding-of-a-stream">some solutions</a>, but the one that I ended up implementing was using the
<a href="https://any23.apache.org">Apache Any23</a>. It includes the <code>TikaEncodingDetector</code>,
that can be used to auto-detect the file encoding of a stream. The final code
for the CharsetFinder implementation is the following:
```java
package util;</p>

<p>import org.apache.any23.encoding.TikaEncodingDetector;
import org.zkoss.zk.ui.util.CharsetFinder;</p>

<p>import java.nio.charset.Charset;</p>

<p>public class TikaCharsetFinder implements CharsetFinder {</p>

<pre><code>@Override
public String getCharset(String contentType, InputStream content) throws IOException {
    return new TikaEncodingDetector().guessEncoding(content);
}
</code></pre>

<p>}
```</p>

<p>Yep, it is that simple. The final ZK configuration to use this class is:
```xml
<zk>
  &lt;system-config></p>

<pre><code>&lt;upload-charset-finder-class&gt;util.TikaCharsetFinder&lt;/upload-charset-finder-class&gt;
...
</code></pre>

<p>  &lt;/system-config>
  &hellip;
</zk>
```</p>
]]></content>
  </entry>
  
</feed>
