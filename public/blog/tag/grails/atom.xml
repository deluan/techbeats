<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: grails | TechBeats]]></title>
  <link href="http://techbeats.deluan.com/blog/tag/grails/atom.xml" rel="self"/>
  <link href="http://techbeats.deluan.com/"/>
  <updated>2015-07-10T21:36:27-04:00</updated>
  <id>http://techbeats.deluan.com/</id>
  <author>
    <name><![CDATA[Deluan Quintão]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Profiling web requests in your Grails application]]></title>
    <link href="http://techbeats.deluan.com/profiling-web-requests-in-grails-application"/>
    <updated>2010-12-29T01:11:39-05:00</updated>
    <id>http://techbeats.deluan.com/profiling-web-requests-in-your-grails-application</id>
    <content type="html"><![CDATA[<p>Here’s a simple filter I’ve been using to help me detect points of improvement in my application:</p>

<p><div><pre><code>class UtilFilters {

    def filters = {

        profiler(controller: &#39;*&#39;, action: &#39;*&#39;) {
            before = {
                request._timeBeforeRequest = System.currentTimeMillis()
            }

            after = {
                request._timeAfterRequest = System.currentTimeMillis()
            }

            afterView = {
                if (params.showTime) {
                    session._showTime = params.showTime == &quot;on&quot;
                }
                if (session._showTime) {
                    def actionDuration = request._timeAfterRequest - request._timeBeforeRequest
                    def viewDuration = System.currentTimeMillis() - request._timeAfterRequest
                    log.debug(&quot;Request duration for (${controllerName}/${actionName}): ${actionDuration}ms/${viewDuration}ms&quot;)
                }
            }
        }
    }

}

</code></pre></div>
</p>

<p>To use it, put this class in the <code>grails-app/conf</code> folder of your project. To activate the profile, call any URL
of your application with the <code>showTime=on</code> parameter, like this:</p>

<!-- more -->


<pre><code>http://localhost:8080/my-grails-app/book/list?showTime=on
</code></pre>

<p>After calling that URL, all request times will be measured and informed on the application’s log, like this:</p>

<pre><code>2010-12-21 12:02:31,698 [http-8080-5] DEBUG filters.UtilFilters  - Request duration for (book/list): 20ms/50ms
</code></pre>

<p>The first time informed (20ms) is the time spent executing the action (list in this case) and the second (50ms) is
the time spent rendering the view (<code>list.gsp</code>).</p>

<p>To turn off the profiler, call any URL with <code>showTime=off</code>:</p>

<pre><code>http://localhost:8080/my-grails-app?showTime=on
</code></pre>

<p>Enjoy :)</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Using Cache-Headers plugin in a non-english server]]></title>
    <link href="http://techbeats.deluan.com/using-cache-headers-plugin-in-a-non-english-s"/>
    <updated>2010-12-21T01:03:35-05:00</updated>
    <id>http://techbeats.deluan.com/using-cache-headers-plugin-in-a-non-english-server</id>
    <content type="html"><![CDATA[<p><strong>UPDATE: This problem has been fixed in version 1.1.3 of the plugin. Thanks Marc and Luke Daley!</strong></p>

<p>This week I tried the <a href="http://www.anyware.co.uk/2005/">Marc Palmer</a>’s excelent plugin
<a href="http://www.grails.org/plugin/cache-headers">Cache-Headers</a>, and it really rocks! Using it I can make all my
server-side generated images be cached on the client, reducing significantly the bandwidth and cpu-power necessary by
my application.</p>

<p>But there’s a little gotcha: The plugin (as of version 1.1.2) uses a SimpleDateFormat to generate and check the
Last-Modified header, and the implementation creates this SimpleDateFormat with the system’s default Locale, in my
case Portuguese. This causes errors like this:</p>

<!-- more -->


<pre><code>java.lang.IllegalArgumentException: Ter, 21 dez 2010 15:10:33 GMT
    at com.grailsrocks.cacheheaders.CacheHeadersService.withCacheHeaders(CacheHeadersService.groovy:140)
    at com.grailsrocks.cacheheaders.CacheHeadersService$withCacheHeaders.call(Unknown Source)
    at CacheHeadersGrailsPlugin$_addCacheMethods_closure7_closure11.doCall(CacheHeadersGrailsPlugin.groovy:61)
    at org.weceem.controllers.WcmContentController$_closure3.doCall(WcmContentController.groovy:172)
    at org.weceem.controllers.WcmContentController$_closure3.doCall(WcmContentController.groovy)
    at org.apache.shiro.web.servlet.ShiroFilter.executeChain(ShiroFilter.java:687)
    at org.apache.shiro.web.servlet.ShiroFilter.doFilterInternal(ShiroFilter.java:616)
    at org.apache.shiro.web.servlet.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:81)
</code></pre>

<p>The workaround I found was to override the construction of that SimpleDateFormat. Luckily it’s been created in a small
class, that is easy to extend:</p>

<p><div><pre><code>package com.deluan.grails.util

import java.text.SimpleDateFormat
import com.grailsrocks.cacheheaders.DateFormatterThreadLocal

/**
 * This class is used to force CacheHeadersService (from the cache-headers 
 * plugin) to generate http-dates in english. It MUST be used when the 
 * locale of your server is not English.
 * &lt;p/&gt;
 * To use it, put the following configuration in your Config.groovy:
 * &lt;pre&gt;
 * beans {
 *    cacheHeadersService {
 *        dateFormatters = new com.deluan.grails.util.EnglishDateFormatterThreadLocal()
 *    }
 * }
 * &lt;/pre&gt;
 * 
 * @author Deluan
 */
class EnglishDateFormatterThreadLocal extends DateFormatterThreadLocal {
    SimpleDateFormat initialValue() {
        def v = new SimpleDateFormat(RFC1123_DATE_FORMAT, Locale.ENGLISH)
        v.timeZone = TimeZone.getTimeZone(&#39;GMT&#39;)
        return v
    }
}
</code></pre></div>
</p>

<p>All you have to do is put this class in your project (in the <code>src/groovy</code> folder) and add the following configuration
override in your <code>Config.groovy</code>:</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='groovy'><span class='line'><span class="n">beans</span> <span class="o">{</span>
</span><span class='line'>    <span class="n">cacheHeadersService</span> <span class="o">{</span>
</span><span class='line'>        <span class="n">dateFormatters</span> <span class="o">=</span> <span class="k">new</span> <span class="n">com</span><span class="o">.</span><span class="na">deluan</span><span class="o">.</span><span class="na">grails</span><span class="o">.</span><span class="na">util</span><span class="o">.</span><span class="na">EnglishDateFormatterThreadLocal</span><span class="o">()</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>I already filled a bug report here: <a href="http://jira.codehaus.org/browse/GRAILSPLUGINS-2707,">http://jira.codehaus.org/browse/GRAILSPLUGINS-2707,</a> and probably this post will be
obsolete in a near future :)</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Calling the correct Grails version automatically from command line]]></title>
    <link href="http://techbeats.deluan.com/calling-the-right-grails-version-from-command"/>
    <updated>2010-10-05T00:48:53-04:00</updated>
    <id>http://techbeats.deluan.com/calling-the-correct-grails-version-automatically-from-command-line</id>
    <content type="html"><![CDATA[<p><strong>UPDATE</strong>: For latest version and instructions, see <a href="http://github.com/deluan/grails.sh">http://github.com/deluan/grails.sh</a></p>

<p>Now that I decided to organize and publish some of my code/hacks here, I thought
it would be a good thing to republish here my Grails caller script.</p>

<p>I work on and maintain various Grails projects at the same time, and some of
them uses versions of Grails as old as 1.0.3! So the question is: How to call
the right version of grails command for a given project, the version that the
project was created with?</p>

<!-- more -->


<p>First I tried changing the <code>GRAILS_HOME</code> environment variable every time I was
going to work with a project that uses a different version than the default.
But it’s just too much work for a thing that should be transparent. So I decided
to create a shell script to solve this problem. The script should detect which
Grails version to call when it’s executed. Here’s the script I came up with:</p>

<p><div><pre><code>#!/bin/sh
# Author: Deluan (http://techbeats.deluan.com)

# Check if GRAILS_HOME is set
if [ -z &quot;$GRAILS_HOME&quot; -o ! -d &quot;$GRAILS_HOME&quot; ]; then
	echo &quot;Error: GRAILS_HOME not set&quot;
	exit 2
fi

# Extract the base path from GRAILS_HOME
BASE_GRAILS_PATH=`echo $GRAILS_HOME | sed -e &quot;s/[^\/\\]*$//&quot; -e &quot;s/^$/./&quot;`
APP_PROP=&quot;application.properties&quot;

# Try to get the version from the command line
TRY_VERSION=$1
if [ -d &quot;${BASE_GRAILS_PATH}/grails-${TRY_VERSION}&quot; ]; then
	VERSION=$TRY_VERSION
	shift
fi 

# Or else get the version from the application.properties in the current directory
[ -z &quot;$VERSION&quot; -a -f &quot;$APP_PROP&quot; ] &amp;&amp;
    VERSION=`awk -F&#39;=&#39; &#39;/app.grails.version/ { print $2 }&#39; $APP_PROP | tr -d &#39;\r\n&#39;`

# Or else use the default version
if [ -z &quot;$VERSION&quot; ]; then  
    VERSION=`basename $GRAILS_HOME | cut -f 2 -d &quot;-&quot;`
fi

export GRAILS_HOME=${BASE_GRAILS_PATH}/grails-${VERSION}
GRAILS_CMD=${GRAILS_HOME}/bin/grails

if [ ! -x &quot;$GRAILS_CMD&quot; ]; then
	echo &quot;Error: grails command not found at &#39;$GRAILS_CMD&#39;!&quot;
	exit 3
fi

exec $GRAILS_CMD $*
</code></pre></div>
</p>

<h2>How it Works?</h2>

<p>The script first checks if you specified a version in the command line,
like: <code>grails 1.3.5-SNAPSHOT create-app</code>. If not, it looks for an
<code>application.properties</code> file in the current folder. This file keeps some
metadata for Grails projects, including the Grails version the project was
created with. If it does not find any <code>application.properties</code> in the current
folder, it then just calls the
<a href="http://grails.org/Installation">default Grails installed</a> in your system,
the one that <code>GRAILS_HOME</code> points to.</p>

<h2>Prerequisites</h2>

<ul>
<li>All your Grails versions must be installed under the same base directory. Ex:</li>
</ul>


<pre><code>  /opt/grails-1.0.3
  /opt/grails-1.1.1
  /opt/grails-1.2-M2
  /opt/grails-1.3.3
  /opt/grails-1.3.5-SNAPSHOT
</code></pre>

<ul>
<li><p><code>GRAILS_HOME</code> environment variable must be set and point to your “default”
Grails installation</p></li>
<li><p>This script was tested on Mac OS X (Snow Leopard), Linux (Ubuntu) and
Windows (with cygwin)</p></li>
</ul>


<h2>Installation</h2>

<ul>
<li>Download the script: <a href="http://github.com/deluan/grails.sh/raw/master/grails">http://github.com/deluan/grails.sh/raw/master/grails</a></li>
<li>Include the folder where it is installed in your <code>PATH</code>.</li>
<li>Exclude <code>$GRAILS_HOME/bin</code> from your <code>PATH</code></li>
</ul>


<h2>Usage</h2>

<p>Using the script is as transparent as possible:</p>

<ul>
<li>If you invoke it from a project folder, it will detect the version used by
the project and call the correct grails (if it is installed in your system)</li>
<li>If you invoke it from any other folder that does not contain a Grails project,
it will call the “default” Grails installation</li>
<li>If you want to call a specific Grails version (i.e. when doing an upgrade) you
can specify the version you want in the first parameter. Ex:
<code>
$ grails 1.3.3 upgrade
</code></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[How to use an external log4j.properties in you Grails project]]></title>
    <link href="http://techbeats.deluan.com/how-to-use-an-external-log4jproperties-in-you-0"/>
    <updated>2010-09-30T23:33:52-04:00</updated>
    <id>http://techbeats.deluan.com/how-to-use-an-external-log4j-dot-properties-in-you-grails-project</id>
    <content type="html"><![CDATA[<p>In a recent Grails project, I had to follow some corporate guidelines regarding application deployment, and one of
those were that the log4j configuration for an application must be externalized in a properties file.</p>

<p>I searched for a <a href="http://grails.org/plugin/home">Grails plugin</a> that could help me with this, with no luck.
Then I remembered that a Grails application is just a
<a href="http://blog.springsource.com/2010/06/08/spring-the-foundation-for-grails/">Spring application in disguise</a>,
so I looked for a Spring way to do this.</p>

<p>There are at least two ways to do this using Spring:
<a href="http://static.springsource.org/spring/docs/3.0.x/javadoc-api/org/springframework/web/util/Log4jConfigListener.html">Log4jConfigListener</a>
and
<a href="http://static.springsource.org/spring/docs/3.0.x/javadoc-api/org/springframework/util/Log4jConfigurer.html">Log4jConfigurer</a>.
I chose the later because the former assumes an expanded WAR file, which was not my case.</p>

<p>Here’s the recipe I came up with:</p>

<!-- more -->


<ul>
<li>Configure a Log4jConfigurer Spring bean in your <code>grails-app/conf/resources.groovy</code>:
(click <a href="https://gist.github.com/deluan/605359#file-resources-xml">here for a xml version</a>)</li>
</ul>


<p><div><pre><code>beans = {
    log4jConfigurer(org.springframework.beans.factory.config.MethodInvokingFactoryBean) {
        targetClass = &quot;org.springframework.util.Log4jConfigurer&quot;
        targetMethod = &quot;initLogging&quot;
        arguments = [&quot;classpath:myapp/log4j.properties&quot;]
    }

    ...

}</code></pre></div>
</p>

<ul>
<li><p>Install the templates in your project with grails install-templates, so you can change some files used for Grails'
code generation. The one we are interested in is the web.xml template.</p></li>
<li><p>Comment out the Grails' Log4jConfigListener from the <code>src/templates/war/web.xml</code> template:</p></li>
</ul>


<p><div><pre><code>    &lt;filter-mapping&gt;
        &lt;filter-name&gt;sitemesh&lt;/filter-name&gt;
        &lt;url-pattern&gt;/*&lt;/url-pattern&gt;
    &lt;/filter-mapping&gt;


    &lt;!-- Comment this out!
    &lt;listener&gt;
        &lt;listener-class&gt;org.codehaus.groovy.grails.web.util.Log4jConfigListener&lt;/listener-class&gt;
    &lt;/listener&gt;
    --&gt;

    &lt;listener&gt;
        &lt;listener-class&gt;org.codehaus.groovy.grails.web.context.GrailsContextLoaderListener&lt;/listener-class&gt;
    &lt;/listener&gt;</code></pre></div>
</p>

<ul>
<li><p>You can (and should) remove the log4j configuration block from your Config.groovy</p></li>
<li><p>That’s it!</p></li>
</ul>


<p>This was tested with Grails 1.3.3, deploying to an Oracle WebLogic 10.3.0 container.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Creating permalinks with Grails]]></title>
    <link href="http://techbeats.deluan.com/creating-permalinks-with-grails"/>
    <updated>2009-03-18T22:51:37-04:00</updated>
    <id>http://techbeats.deluan.com/creating-permalinks-with-grails</id>
    <content type="html"><![CDATA[<p>I&rsquo;ve been working with <a href="http://grails.org">Grails</a> for some time now and if I had to choose just one good thing
to say about it is how it&rsquo;s community is really great!</p>

<p>I think it&rsquo;s time to start giving back some contribution, and here&rsquo;s the first one: A Permalink Codec to generate
permalinks based on strings. It strips out all non word chars and convert the resulting string to lowercase:</p>

<!-- more -->


<p><div><pre><code>/*
 * Copyright 2010 Deluan Cotts (grails@deluan.com.br)
 *
 * Licensed under the Apache License, Version 2.0 (the &quot;License&quot;);
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an &quot;AS IS&quot; BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package com.deluan.grails.codecs

import java.util.regex.Matcher
import java.util.regex.Pattern

/**
 * Strip all non word chars, convert to lowercase
 */
class PermalinkCodec {
    private static final String[] CARACTERES_SEM_ACENTO
    private static final Pattern[] PATTERNS

    static {
        CARACTERES_SEM_ACENTO = [&quot;a&quot;, &quot;e&quot;, &quot;i&quot;, &quot;o&quot;, &quot;u&quot;, &quot;c&quot;, &quot;n&quot;]
        PATTERNS = new Pattern[CARACTERES_SEM_ACENTO.length]
        PATTERNS[0] = Pattern.compile(&quot;[áàãâä]&quot;, Pattern.CASE_INSENSITIVE)
        PATTERNS[1] = Pattern.compile(&quot;[éèêë]&quot;, Pattern.CASE_INSENSITIVE)
        PATTERNS[2] = Pattern.compile(&quot;[íìïî]&quot;, Pattern.CASE_INSENSITIVE)
        PATTERNS[3] = Pattern.compile(&quot;[óòöõô]&quot;, Pattern.CASE_INSENSITIVE)
        PATTERNS[4] = Pattern.compile(&quot;[úùüû]&quot;, Pattern.CASE_INSENSITIVE)
        PATTERNS[5] = Pattern.compile(&quot;ç&quot;, Pattern.CASE_INSENSITIVE)
        PATTERNS[6] = Pattern.compile(&quot;ñ&quot;, Pattern.CASE_INSENSITIVE)
    }

    private static String replaceSpecial(String text) {
        String result = text
        for (int i = 0; i &lt; PATTERNS.length; i++) {
            Matcher matcher = PATTERNS[i].matcher(result)
            result = matcher.replaceAll(CARACTERES_SEM_ACENTO[i])
        }
        return result
    }

    static encode = {str -&gt;
        str = replaceSpecial(str.toString().toLowerCase())
        return str.replaceAll(&quot;\\W&quot;, &quot;-&quot;)
    }

}</code></pre></div>
</p>

<p>To use it in your Grails project, save it in <code>grails-app/utils/com/deluan/grails/codecs</code> folder as <code>PermalinkCodec.groovy</code>.</p>

<p>Please read the (excelent) <a href="http://grails.org/doc/latest">Grails manual</a> for more info
on <a href="http://grails.org/doc/latest/guide/single.html#codecs">how to use codecs</a>.</p>
]]></content>
  </entry>
  
</feed>
