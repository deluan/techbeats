<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Grails | TechBeats]]></title>
  <link href="http://frozen-shelf-7499.herokuapp.com//tag/grails/atom.xml" rel="self"/>
  <link href="http://frozen-shelf-7499.herokuapp.com//"/>
  <updated>2014-07-15T23:59:17-05:00</updated>
  <id>http://frozen-shelf-7499.herokuapp.com//</id>
  <author>
    <name><![CDATA[Deluan Quintão]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Calling the Correct Grails Version Automatically From Command Line]]></title>
    <link href="http://frozen-shelf-7499.herokuapp.com//calling-the-right-grails-version-from-command"/>
    <updated>2010-10-04T23:48:53-05:00</updated>
    <id>http://frozen-shelf-7499.herokuapp.com//calling-the-correct-grails-version-automatically-from-command-line</id>
    <content type="html"><![CDATA[<p><strong>UPDATE</strong>: For latest version and instructions, see <a href="http://github.com/deluan/grails.sh">http://github.com/deluan/grails.sh</a></p>

<p>Now that I decided to organize and publish some of my code/hacks here, I thought it would be a good thing to republish
here my Grails caller script.</p>

<p>I work and mantain various Grails projects at the same time, and some of them uses versions of Grails as old as 1.0.3!
So the question is: How to call the right version of grails command for a given project, the version that the project
was created with?</p>

<p>First I tried changing the <code>GRAILS_HOME</code> environment variable every time I was going to work with a project that uses a
different version than the default. But it’s just too much work for a thing that should be transparent. So I decided to
create a shell script to solve this problem. The script should detect which Grails version to call when it’s executed.
Here’s the script I came up with:</p>

<!-- more -->


<h2>How it Works?</h2>

<p>The script first checks if you specified a version in the command line, like: <code>grails 1.3.5-SNAPSHOT create-app</code>.
If not, it looks for an application.properties file in the current folder. This file keeps some metadata for Grails
projects, including the Grails version the project was created with. If it does not find any application.properties in
the current folder, it then just calls the <a href="http://grails.org/Installation">default Grails installed</a> in your system,
the one that <code>GRAILS_HOME</code> points to.</p>

<h2>Prerequisites</h2>

<ul>
<li>All your Grails versions must be installed under the same base directory. Ex:</li>
</ul>


<p><code>
  /opt/grails-1.0.3
  /opt/grails-1.1.1
  /opt/grails-1.2-M2
  /opt/grails-1.3.3
  /opt/grails-1.3.5-SNAPSHOT
</code></p>

<ul>
<li><p><code>GRAILS_HOME</code> environment variable must be set and point to your “default” Grails installation</p></li>
<li><p>This script was tested on Mac OS X (Snow Leopard), Linux (Ubuntu) and Windows (with cygwin)</p></li>
</ul>


<h2>Installation</h2>

<ul>
<li>Download the script: <a href="http://github.com/deluan/grails.sh/raw/master/grails">http://github.com/deluan/grails.sh/raw/master/grails</a></li>
<li>Include the folder where it is installed in your <code>PATH</code>.</li>
<li>Exclude <code>$GRAILS_HOME/bin</code> from your <code>PATH</code></li>
</ul>


<h2>Usage</h2>

<p>Using the script is as transparent as possible:</p>

<ul>
<li>If you invoke it from a project folder, it will detect the version used by the project and call the correct grails
(if it is installed in your system)</li>
<li>If you invoke it from any other folder that does not contain a Grails project, it will call the “default” Grails
installation</li>
<li>If you want to call a specific Grails version (i.e. when doing an upgrade) you can specify the version you want in
the first parameter. Ex:
<code>
$ grails 1.3.3 upgrade
</code></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[How to Use an External log4j.properties in You Grails Project]]></title>
    <link href="http://frozen-shelf-7499.herokuapp.com//how-to-use-an-external-log4jproperties-in-you-0"/>
    <updated>2010-09-30T22:33:52-05:00</updated>
    <id>http://frozen-shelf-7499.herokuapp.com//how-to-use-an-external-log4j-dot-properties-in-you-grails-project</id>
    <content type="html"><![CDATA[<p>In a recent Grails project, I had to follow some corporate guidelines regarding application deployment, and one of
those were that the log4j configuration for an application must be externalized in a properties file.</p>

<p>I searched for a <a href="http://grails.org/plugin/home">Grails plugin</a> that could help me with this, with no luck.
Then I remembered that a Grails application is just a
<a href="http://blog.springsource.com/2010/06/08/spring-the-foundation-for-grails/">Spring application in disguise</a>,
so I looked for a Spring way to do this.</p>

<p>There are at least two ways to do this using Spring:
<a href="http://static.springsource.org/spring/docs/3.0.x/javadoc-api/org/springframework/web/util/Log4jConfigListener.html">Log4jConfigListener</a>
and
<a href="http://static.springsource.org/spring/docs/3.0.x/javadoc-api/org/springframework/util/Log4jConfigurer.html">Log4jConfigurer</a>.
I chose the later because the former assumes an expanded WAR file, which was not my case.</p>

<p>Here’s the recipe I came up with:</p>

<!-- more -->


<ul>
<li>Configure a Log4jConfigurer Spring bean in your <code>grails-app/conf/resources.groovy</code>:
(click <a href="https://gist.github.com/deluan/605359#file-resources-xml">here for a resources.xml</a> version)</li>
</ul>


<p><div><script src='https://gist.github.com/605359.js?file=resources.groovy'></script>
<noscript><pre><code>beans = {
    log4jConfigurer(org.springframework.beans.factory.config.MethodInvokingFactoryBean) {
        targetClass = &quot;org.springframework.util.Log4jConfigurer&quot;
        targetMethod = &quot;initLogging&quot;
        arguments = [&quot;classpath:myapp/log4j.properties&quot;]
    }

    ...

}</code></pre></noscript></div>
</p>

<ul>
<li><p>Install the templates in your project with grails install-templates, so you can change some files used for Grails'
code generation. The one we are interested in is the web.xml template.</p></li>
<li><p>Comment out the Grails' Log4jConfigListener from the <code>src/templates/war/web.xml</code> template:</p></li>
</ul>


<p><div><script src='https://gist.github.com/605359.js?file=web.xml'></script>
<noscript><pre><code>    &lt;filter-mapping&gt;
        &lt;filter-name&gt;sitemesh&lt;/filter-name&gt;
        &lt;url-pattern&gt;/*&lt;/url-pattern&gt;
    &lt;/filter-mapping&gt;


    &lt;!-- Comment this out!
    &lt;listener&gt;
        &lt;listener-class&gt;org.codehaus.groovy.grails.web.util.Log4jConfigListener&lt;/listener-class&gt;
    &lt;/listener&gt;
    --&gt;

    &lt;listener&gt;
        &lt;listener-class&gt;org.codehaus.groovy.grails.web.context.GrailsContextLoaderListener&lt;/listener-class&gt;
    &lt;/listener&gt;</code></pre></noscript></div>
</p>

<ul>
<li><p>You can (and should) remove the log4j configuration block from your Config.groovy</p></li>
<li><p>That’s it!</p></li>
</ul>


<p>This was tested with Grails 1.3.3, deploying to an Oracle WebLogic 10.3.0 container.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Creating Permalinks With Grails]]></title>
    <link href="http://frozen-shelf-7499.herokuapp.com//creating-permalinks-with-grails"/>
    <updated>2009-03-18T21:51:37-05:00</updated>
    <id>http://frozen-shelf-7499.herokuapp.com//creating-permalinks-with-grails</id>
    <content type="html"><![CDATA[<p>I&rsquo;ve been working with <a href="http://grails.org">Grails</a> for some time now and if I had to choose just one good thing
to say about it is how it&rsquo;s community is really great!</p>

<p>I think it&rsquo;s time to start giving back some contribution, and here&rsquo;s the first one: A Permalink Codec to generate
permalinks based on strings. It strips out all non word chars and convert the resulting string to lowercase:</p>

<!-- more -->


<p><div><script src='https://gist.github.com/600968.js'></script>
<noscript><pre><code>/*
 * Copyright 2010 Deluan Cotts (grails@deluan.com.br)
 *
 * Licensed under the Apache License, Version 2.0 (the &quot;License&quot;);
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an &quot;AS IS&quot; BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package com.deluan.grails.codecs

import java.util.regex.Matcher
import java.util.regex.Pattern

/**
 * Strip all non word chars, convert to lowercase
 */
class PermalinkCodec {
    private static final String[] CARACTERES_SEM_ACENTO
    private static final Pattern[] PATTERNS

    static {
        CARACTERES_SEM_ACENTO = [&quot;a&quot;, &quot;e&quot;, &quot;i&quot;, &quot;o&quot;, &quot;u&quot;, &quot;c&quot;, &quot;n&quot;]
        PATTERNS = new Pattern[CARACTERES_SEM_ACENTO.length]
        PATTERNS[0] = Pattern.compile(&quot;[áàãâä]&quot;, Pattern.CASE_INSENSITIVE)
        PATTERNS[1] = Pattern.compile(&quot;[éèêë]&quot;, Pattern.CASE_INSENSITIVE)
        PATTERNS[2] = Pattern.compile(&quot;[íìïî]&quot;, Pattern.CASE_INSENSITIVE)
        PATTERNS[3] = Pattern.compile(&quot;[óòöõô]&quot;, Pattern.CASE_INSENSITIVE)
        PATTERNS[4] = Pattern.compile(&quot;[úùüû]&quot;, Pattern.CASE_INSENSITIVE)
        PATTERNS[5] = Pattern.compile(&quot;ç&quot;, Pattern.CASE_INSENSITIVE)
        PATTERNS[6] = Pattern.compile(&quot;ñ&quot;, Pattern.CASE_INSENSITIVE)
    }

    private static String replaceSpecial(String text) {
        String result = text
        for (int i = 0; i &lt; PATTERNS.length; i++) {
            Matcher matcher = PATTERNS[i].matcher(result)
            result = matcher.replaceAll(CARACTERES_SEM_ACENTO[i])
        }
        return result
    }

    static encode = {str -&gt;
        str = replaceSpecial(str.toString().toLowerCase())
        return str.replaceAll(&quot;\\W&quot;, &quot;-&quot;)
    }

}</code></pre></noscript></div>
</p>

<p>To use it in your Grails project, save it in <code>grails-app/utils/com/deluan/grails/codecs</code> folder as <code>PermalinkCodec.groovy</code>.</p>

<p>Please read the (excelent) <a href="http://grails.org/doc/latest">Grails manual</a> for more info
on <a href="http://grails.org/doc/latest/guide/single.html#codecs">how to use codecs</a>.</p>
]]></content>
  </entry>
  
</feed>
